package pages

import (
	"github.com/linkinlog/throttlr/web/shared"
	"github.com/linkinlog/throttlr/internal/models"
	"fmt"
	"strconv"
)

func NewEndpointView(e *models.Endpoint) endpointView {
	return endpointView{
		e: e,
	}
}

type endpointView struct {
	e *models.Endpoint
}

func (ev endpointView) Props() shared.PageProps {
	return shared.PageProps{
		Title: "EndpointView",
	}
}

templ (ev endpointView) View() {
	<div hx-ext="response-targets">
		<form
			method="POST"
			hx-boost="true"
			hx-target="#response-p"
			hx-target-error="#errors"
			action={ templ.URL(fmt.Sprintf("/v1/delete/%s?key=%s", ev.e.ThrottlrPath, models.UserFromCtx(ctx).ApiKey.String())) }
			onsubmit="return confirm('Do you really want to delete? This is not reversible.');"
		>
			<button class="bg-red-500 text-dark rounded-lg w-12 h-12 text-4xl font-extralight flex justify-center items-center">
				@deleteBtn()
			</button>
		</form>
		<form hx-boost="true" hx-target-error="#errors" hx-target="#response-p" hx-post={ fmt.Sprintf("/v1/update/%s?key=%s", ev.e.ThrottlrPath, models.UserFromCtx(ctx).ApiKey.String()) } action={ templ.URL(fmt.Sprintf("/v1/update/%s?key=%s", ev.e.ThrottlrPath, models.UserFromCtx(ctx).ApiKey.String())) } method="POST" class="mt-4">
			<input value={ strconv.Itoa(ev.e.Id) } type="hidden" name="endpoint_id" id="endpoint_id" class="border-2 border-primary rounded-lg p-2"/>
			<div class="flex flex-col">
				<label for="originalUrl" class="text-secondary">Original URL</label>
				<input value={ ev.e.OriginalUrl.String() } type="text" name="endpoint" id="endpoint" class="border-2 border-primary rounded-lg p-2"/>
			</div>
			<div class="flex flex-col">
				<label for="throttlrUrl" class="text-secondary">Throttlr Path</label>
				<input disabled value={ ev.e.ThrottlrPath } type="text" id="throttlrPath" class="border-2 border-primary rounded-lg p-2"/>
			</div>
			<div class="flex flex-col mt-4">
				<label for="interval" class="text-secondary">Interval</label>
				<select name="interval" id="interval" class="border-2 border-primary rounded-lg p-2">
					<option value="1" selected?={ ev.e.Bucket.Interval == 1 }>Minute</option>
					<option value="2" selected?={ ev.e.Bucket.Interval == 2 }>Hour</option>
					<option value="3" selected?={ ev.e.Bucket.Interval == 3 }>Day</option>
					<option value="4" selected?={ ev.e.Bucket.Interval == 4 }>Week</option>
					<option value="5" selected?={ ev.e.Bucket.Interval == 5 }>Month</option>
				</select>
			</div>
			<div class="flex flex-col mt-4">
				<label for="max" class="text-secondary">Max Requests Per Interval</label>
				<input value={ strconv.Itoa(ev.e.Bucket.Max) } type="number" name="max" id="max" class="border-2 border-primary rounded-lg p-2"/>
			</div>
			<button type="submit" class="bg-primary text-dark rounded-lg w-full h-12 text-2xl mt-4">Update Endpoint</button>
		</form>
		<p id="response-p" class="w-full text-center text-secondary p-2 mb-4 rounded no-underline"></p>
		<p id="errors" class="w-full text-center text-red-500 p-2 mb-4 rounded no-underline"></p>
	</div>
}

func selected(value, interval int) string {
	if value == interval {
		return "selected"
	}
	return ""
}
